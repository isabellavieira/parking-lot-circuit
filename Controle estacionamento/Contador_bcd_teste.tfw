////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2003 Xilinx, Inc.
// All Right Reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 8.2i
//  \   \         Application : ISE
//  /   /         Filename : Contador_bcd_teste.tfw
// /___/   /\     Timestamp : Wed Dec 07 11:30:21 2011
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: 
//Design Name: Contador_bcd_teste
//Device: Xilinx
//
`timescale 1ns/1ps

module Contador_bcd_teste;
    reg somar = 1'b0;
    reg decrem = 1'b0;
    reg clk = 1'b0;
    reg reset = 1'b0;
    wire [3:0] unid;
    wire [3:0] cent;
    wire [3:0] dez;
    wire [3:0] milhar;

    parameter PERIOD = 200;
    parameter real DUTY_CYCLE = 0.5;
    parameter OFFSET = 0;

    initial    // Clock process for clk
    begin
        #OFFSET;
        forever
        begin
            clk = 1'b0;
            #(PERIOD-(PERIOD*DUTY_CYCLE)) clk = 1'b1;
            #(PERIOD*DUTY_CYCLE);
        end
    end

    cont_bcd UUT (
        .somar(somar),
        .decrem(decrem),
        .clk(clk),
        .reset(reset),
        .unid(unid),
        .cent(cent),
        .dez(dez),
        .milhar(milhar));

    integer TX_FILE = 0;
    integer TX_ERROR = 0;
    
    initial begin  // Open the results file...
        TX_FILE = $fopen("results.txt");
        #1.00002e+007 // Final time:  1.00002e+007 ns
        if (TX_ERROR == 0) begin
            $display("No errors or warnings.");
            $fdisplay(TX_FILE, "No errors or warnings.");
        end else begin
            $display("%d errors found in simulation.", TX_ERROR);
            $fdisplay(TX_FILE, "%d errors found in simulation.", TX_ERROR);
        end
        $fclose(TX_FILE);
        $stop;
    end

    initial begin
    end

    task CHECK_unid;
        input [3:0] NEXT_unid;

        #0 begin
            if (NEXT_unid !== unid) begin
                $display("Error at time=%dns unid=%b, expected=%b", $time, unid, NEXT_unid);
                $fdisplay(TX_FILE, "Error at time=%dns unid=%b, expected=%b", $time, unid, NEXT_unid);
                $fflush(TX_FILE);
                TX_ERROR = TX_ERROR + 1;
            end
        end
    endtask
    task CHECK_cent;
        input [3:0] NEXT_cent;

        #0 begin
            if (NEXT_cent !== cent) begin
                $display("Error at time=%dns cent=%b, expected=%b", $time, cent, NEXT_cent);
                $fdisplay(TX_FILE, "Error at time=%dns cent=%b, expected=%b", $time, cent, NEXT_cent);
                $fflush(TX_FILE);
                TX_ERROR = TX_ERROR + 1;
            end
        end
    endtask
    task CHECK_dez;
        input [3:0] NEXT_dez;

        #0 begin
            if (NEXT_dez !== dez) begin
                $display("Error at time=%dns dez=%b, expected=%b", $time, dez, NEXT_dez);
                $fdisplay(TX_FILE, "Error at time=%dns dez=%b, expected=%b", $time, dez, NEXT_dez);
                $fflush(TX_FILE);
                TX_ERROR = TX_ERROR + 1;
            end
        end
    endtask
    task CHECK_milhar;
        input [3:0] NEXT_milhar;

        #0 begin
            if (NEXT_milhar !== milhar) begin
                $display("Error at time=%dns milhar=%b, expected=%b", $time, milhar, NEXT_milhar);
                $fdisplay(TX_FILE, "Error at time=%dns milhar=%b, expected=%b", $time, milhar, NEXT_milhar);
                $fflush(TX_FILE);
                TX_ERROR = TX_ERROR + 1;
            end
        end
    endtask

endmodule

